EACH DEMO WILL RUN FOR NO MORE THAN 30 MINUTES. TO GET A CHANCE TO SHOW CASE ALL FEATURES YOU MUST BE ABLE TO LOAD FILES THROUGH A COMMAND LINE ARGUMENT AS SPECIFIED IN THE ASSIGNMENT. FAILURE TO DO SO WILL RESULT IN DELAYS IN MARKING YOUR SUBMISSION DURING THE DEMO. NO EXTRA TIME WILL BE GIVEN.
__________________________________________________________________________________

Total: __________/64 

Bonus: __________/10

General: __/2

___ Program includes a Makefile

___ Program compiles and runs


Starting New Game: __/9
(Have students start two player game and call display)

___ Program displays initial board

___ All players start on OSAP square

___ All players start with $1500 and no properties

___ Cannot end turn (next) if player is eligible to roll
(start a new game, say next when turn comes)

___ Dice rolls are randomized

___ Rolls dice, numbers printed to screen

___ Player is moved on board through dice roll

___ Player is given opportunity to buy unowned property they land on (buy once, 
    say no once)

___ Quit command to end game


Command Line Arguments: __/3

___ -testing: player can specify the two dice which are rolled (ask student to 
     use roll command)

___ -load filename: filename is a load file as described in the specifications.
    Using this command, starts a game based on this file (use display to see
    loaded game)

___ Arguments can be be given in any order

Rolls: __/2

(Use with -testing and force the following using the roll command)

___ Player rolls again when doubles are rolled

___ Player is moved to Tim's after rolling 3 doubles in a row and does not 
    first move to the square the roll would land them on


Starting Load Game: __/3

___ All players start on square given in file

___ All players start with properties given in file

___ Player that starts in Tim's must leave Tim's through valid means


Turn: __/3

___ Player pays tuition when landing on a square owned by another player

___ Save command to save details of current game to a file

___ Assets command for printing player stats to the screen (what is printed
will vary, should include money and properties as a minimum)

Trading: __/8

___ Player can propose a trade to any other player

___ Player can offer money for trade

___ Player can offer property for trade

___ Player can request money for trade

___ Player can request property for trade

___ Proposed trade can be accepted and rejected

___ Player cannot trade property with improvements

___ Player cannot trade property if a property in its monopoly has improvements


Improvements: __/3

___ Player can buy improvements if monopoly is owned on a property which is not
a residence or a gym 

___ Player can sell improvements for half of their cost

___ Player cannot buy improvements on residences and gyms


Monopolies: __/4

___ Tuition is doubled if monopoly is owned and property has no improvements
(not residence/gym)

___ Tuition is accurate for multiple residences being owned

___ Tuition is accurate for multiple gyms being owned

___ Tuition is accurate when property has improvements


Mortgages: __/3

___ Player can mortgage property for half of its value

___ Player can unmortgage property for mortgage value plus 10% on loan amount

___ Player cannot mortgage property if a property in the monopoly has an improvement


Tim's Line: __/4
(Use FILE: tims_line.txt)
(Bob is just visiting i.e. not IN Tim's line)
(Charlie is IN Tim's line)

___ If player lands on Tim's Line through rolling, they can leave on next turn

(You will likely have to look at code for DC Tim's cup unless the student has implemented
loading with a Tim's cup)

___ Player can leave Tim's through Tim's cup, money or rolling doubles
(Try with money, try with -testing and roll doubles on Charlie)

___ Player must use a Tim's cup or pay on third turn if they did not roll 
doubles (uses final roll)
(Charlie has already been in Tim's line for two turns. use -testing and roll 
a non double. He should have to pay or use Tim's cup now)

___ Tim's Cup returned if used


SLC/Needles Hall: __/3

(Use -testing with dice roll to force land on SLC and Needles Hall once 
and check behaviour)
___ When SLC is landed on, movement occurs correctly and is random (should check
code for probabilities)

___ When Needles Hall is landed on, money change follows given probabilities (should check code for probabilities)

___ Tim's Cup is given 1% of the time instead of other actions (should check 
code for probabilities)


Non-Ownable Squares: __/5

___ Goose Nesting: Nothing happens on Goose Nesting

___ Tuition Square: Player chooses to pay 10% of net worth or $300
(cannot use asset command while deciding what to pay)

___ Coop Fee: Player pays $150 dollars

___ Collect OSAP: Player gains $200 when they land on OSAP

___ Collect OSAP: Player gains $200 when they pass over OSAP



Auctions: __/4

___ An auction begins when a player declines buying a property

___ An auction for each property occurs when a player goes bankrupt to the bank

___ An auction continues until all except one player has withdrawn

___ A player cannot successfully underbid another player in an auction


Bankrupt: __/3
(FILE: end-game.txt or mortgage.txt can be used to force players to go 
bankrupt to Alice or Bank)

___ Player give assets to a player if they go bankrupt to a player

___ Player receiving properties must pay 10% of the mortgage value of each 
mortgaged property (may pay to unmortgage as well, which is 100% of property 
cost)

___ If a player does not unmortgage a property they receive through bankruptcy immediately,
they must pay 10% again to unmortgage it later, plus 100% of property cost 


Ending the Game: __/5

___ Game continues until only one player is remaining

___ Program leaks no more than a modest amount of memory (aside from C++ libraries)

___ Program leaks no memory

__/2 No segfaults/crashes/errors throughout entire demo (even if accidental invalid input)

-1 mark for each segfault/crash/error up to a maximum of -5

Bonus: (Note to marker: Use the printed page containing the bonus.txt document that the group submitted. If the bonus.txt file was not submitted, but the group claims to have implemented the bonus, try your best to describe the bonus feature below
(please be descriptive and indicate level of difficulty. 
Difficulty numbers should be filled once the group has left to avoid arguments. 
1 - easy and 10 - very difficult):

Questions and Answers

Question: Chess programs usually come with a book of standard opening move sequences. These
are moves from classical strategies that many chess players have memorized. A standard opening
move sequence is typically a list of accepted opening moves and responses to opponentsâ€™ moves, for
the first dozen or so moves of the game. Although you are not required to support this, discuss
how you would implement a book of standard openings if required.

Answer: For a computer player attempting to use a classical strategy, I would store each strategy as a collection of moves up to the desired length. Let's say the strategy required 50 consecutive moves, I would implement an array of integers and characters and feed these moves into the interpreter turn by turn. This, using my predefined checkValid method would check to see if the piece being played could move to the desired tile, ensure the move would not put my King into a check position, as well as if the tile was available (empty or had opponent's piece). One might argue that this implementation opens the strategy up for exploitation as it makes the Computer unresponsive to the opponent's moves. However, a priority queue could easily be implemented to first check if an enemy piece could be captured, if an ally piece could be saved, if our king was in check and lastly, if none of the above was possible, the strategy would be continued.

Another comprehensive strategy would be to implement an aggresive algorithm that checks up to n moves in the future to see if an enemy piece can be captured. For example, n = 3. Our algorithm will be run on each piece the computer owns; each piece will be analyzed 3 moves into the future to see if with the given location of the piece and the current state of the board (relative positions of enemy pieces) if there is a combination of moves that will allow me to capture an enemy piece. If more than one enemy piece can be captured, values can be assigned such that more powerful pieces are targetted (Queen over Pawns) as well as strategies that require a minimum number of moves as to increase probability of success. If an attack requires 5 moves there is a greater chance that within the next 4 moves, circumstances will change that will disallow you to attack that piece. However, if a strategy only requires 2 moves, there is a reduced entropy and thus a higher chance that the strategy is still relevant.
 

Question: How would you implement a feature that would allow a player to undo his/her last
move? What about an unlimited number of undos?

Answer: If I was to implement an undo feature, I would store each player's moves into a Vector of integers and characters respectively. I would make a special note about piece captures, promotions and castling. Next, I would simply proceed to undo the moves in reverse chronological order switching the move locations. For example the moves (e1 e4, a2 a7, P killed at a7, c5 c3) would be reversed by moving the current piece at c3 back to c3, moving the piece at a7 back to a2 and creating a white Pawn at a7, and finally move the piece at e4 back to e1. This could easily be parsed and fed back into my already defined move interpreter.

Question: Variations on chess abound. For example, four-handed chess is a variant that is played
by four players (search for it!). Outline the changes that would be necessary to make your program
into a four-handed chess game.


Answer: In order to modify our program to allow for four players, we would first need to change the initial setup of the board. Instead of initializing an 8x8 board, we would need to initialize a 14x14 board and ensure that certain tiles are out of range. As well, much more game logic would have to be implemented as there would be many more possibilities. For player's who start on the left or right side, the pawns would move horizontally rather than vertially, so we would modify the pawn class to allow for this change. The game class would also need to keep track of four players instead of two. Everytime a move is made, more checks would be needed to see if pieces could be taken on following turns.


In four player chess, there are single and team variations. For the single variation, once a player is checkmated, we would need to implement a method that either deletes all of the pieces belonging to that player, or transfer ownership of remaining pieces to the player that checkmated the losing player. For the team variation, we would need to modify the way checkmate is determined. When one king is checkmated, a check to see if the other king is also checkmated is done to determine whether a draw or win is the outcome.  

Additionally, the computer's strategy algorithm's would have to be much more rigorous in considering which pieces it can capture and which pieces it can be captured by. This is also varied in the team version considerably because there is 2 opponents versus 3 and team based play opens up the possibility for a team attack and coordination.


Question: Assuming you have already implemented all the commands specified in the Command
Interpreter, how would you implement loading a pre-saved game with maximal code reuse?

Answer: With the functionality of the command interpreter already defined, loading of a saved game would not be difficult to implement. One could simply use the defined setup command, parsing each character in the save file and creating a new game based on those details. The setup function would have to be manipulated slight to account for input such as more than one queen but less than 8 pawns and other combinations that could arise from pawn promotions. It would also need to keep track of unique events such as castling and en pasant. 

